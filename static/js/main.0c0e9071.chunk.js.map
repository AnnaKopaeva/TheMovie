{"version":3,"sources":["components/Pagination/styles/Pagination.module.scss","utils/updateMovieUrl.js","components/MovieList/MovieList.js","actions/types.js","actions/index.js","key.js","components/Header/Header.js","components/Footer/Footer.js","components/Pagination/Pagination.js","utils/getListPages.js","App.js","serviceWorker.js","reducers/data.js","reducers/index.js","index.js","components/MovieList/styles/MovieList.module.scss"],"names":["module","exports","navigationItem","navigationActiveItem","TMDB_IMAGE_BASE_URL","width","arguments","length","undefined","concat","getMoviesList","moviesResponse","Object","toConsumableArray","results","map","movieResult","objectSpread","backdrop_path","poster_path","updateMoviePictureUrls","MovieList","_ref","listMovie","movies","item","react_default","a","createElement","key","id","className","s","movie_item","movie_title","title","src","alt","movies_list","FETCH_TOP_RATED_DATA","FETCH_LATEST_DATA","createMovieDbUrl","relativeUrl","queryParams","baseUrl","keys","forEach","paramName","getTopMovies","page","dispatch","axios","get","then","response","data","type","catch","error","connect","getLatestMovies","onClick","Footer","totalPages","listOfNavigation","listPages","i","push","getListPages","classNames","defineProperty","pagination","App","this","props","Array","isArray","components_Header_Header","components_MovieList_MovieList","components_Pagination_Pagination","total_pages","components_Footer_Footer","Component","state","activeSortType","Boolean","window","location","hostname","match","initialState","latest","topRated","reducer","combineReducers","action","store","createStore","applyMiddleware","thunk","rootElement","document","getElementById","ReactDOM","render","es","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c0e9071.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigationItem\":\"Pagination_navigationItem__HAtQl\",\"navigationActiveItem\":\"Pagination_navigationActiveItem__203Hb\"};","const TMDB_IMAGE_BASE_URL = (width = 185) => `https://image.tmdb.org/t/p/w${width}`;\n\nconst updateMoviePictureUrls = (movieResult, width = 185) => ({\n  ...movieResult,\n  backdrop_path: `${TMDB_IMAGE_BASE_URL(width)}${movieResult.backdrop_path}`,\n  poster_path: `${TMDB_IMAGE_BASE_URL(width)}${movieResult.poster_path}`,\n});\n\nexport const getMoviesList = moviesResponse => (\n  !!moviesResponse ? ([\n    ...moviesResponse.results.map(movieResult => updateMoviePictureUrls(movieResult)),\n  ]) : null\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// styles\nimport s from './styles/MovieList.module.scss';\n\nconst MovieList = ({ movies }) => {\n  const listMovie = movies.map(item => (\n    <li key={item.id} className={s.movie_item}>\n      <span className={s.movie_title}>{item.title}</span>\n      <img src={item.poster_path} alt=\"poster\" />\n    </li>\n  ));\n  return (\n    <div>\n      <ul className={s.movies_list}>\n        {listMovie}\n      </ul>\n    </div>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default MovieList;\n","export const FETCH_TOP_RATED_DATA = 'FETCH_TOP_RATED_DATA';\nexport const FETCH_LATEST_DATA = 'FETCH_LATEST_DATA';\n","import axios from 'axios';\nimport { FETCH_TOP_RATED_DATA, FETCH_LATEST_DATA } from './types';\nimport { MOVIE_DB_API_KEY } from '../key';\n\nconst MOVIE_DB_BASE_URL = 'http://api.themoviedb.org/3';\n\nexport const fetchTopRatedData = (data) => {\n  return {\n    type: FETCH_TOP_RATED_DATA,\n    data,\n  };\n};\n\nexport const fetchLatestData = (data) => {\n  return {\n    type: FETCH_LATEST_DATA,\n    data,\n  };\n};\n\nconst createMovieDbUrl = (relativeUrl, queryParams) => {\n  let baseUrl = `${MOVIE_DB_BASE_URL}${relativeUrl}?api_key=${MOVIE_DB_API_KEY}&language=en-US`;\n  if (queryParams) {\n    Object.keys(queryParams)\n      .forEach((paramName) => baseUrl += `&${paramName}=${queryParams[paramName]}`);\n  }\n  return baseUrl;\n};\n\nexport const getTopMovies = (page) => {\n  return function action(dispatch) {\n    // add loader\n    const request = axios.get(createMovieDbUrl('/movie/top_rated', { page }));\n\n    return request.then((response) => {\n      dispatch(fetchTopRatedData(response.data));\n    }).catch((error) => {\n      throw (error);\n    });\n  };\n};\n\nexport const getLatestMovies = (page) => {\n  return function action(dispatch) {\n    // add loader\n    const request = axios.get(createMovieDbUrl('/movie/latest', { page }));\n\n    return request.then((response) => {\n      dispatch(fetchLatestData(response.data));\n    }).catch((error) => {\n      throw (error);\n    });\n  };\n};\n\n// export const searchMovies = async ({ page, query}) => {\n//   const fullUrl = createMovieDbUrl('/search/movie', {\n//     page,\n//     query,\n//   });\n//   return fetch(fullUrl);\n// };\n//\n// export const getMovieDetails = async ({movieId}) => {\n//   const fullUrl = createMovieDbUrl(`/movie/${movieId}`);\n//   return fetch(fullUrl);\n// };\n","export const MOVIE_DB_API_KEY = '5874acfd11651a28c55771624f7021f4';\n// todo: rename","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { getLatestMovies, getTopMovies } from '../../actions';\n\nconst Header = ({ getLatestMovies, getTopMovies }) => {\n  return (\n    <div className=\"header\">\n      Header\n      <button onClick={() => getLatestMovies(1)}>Latest</button>\n      <button onClick={() => getTopMovies(1)}>Top rated</button>\n    </div>\n  );\n};\n\n// const mapStateToProps = state => ({\n//   data: state.data.data,\n// });\n\nHeader.propTypes = {\n  getLatestMovies: PropTypes.func,\n  getTopMovies: PropTypes.func,\n};\n\nexport default connect(null, { getLatestMovies, getTopMovies })(Header);\n","import React from 'react';\n// import { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      Footer\n    </div>\n  );\n};\n\n// const mapStateToProps = state => ({\n//   data: state.data.data,\n// });\n\nFooter.propTypes = {\n  // movies: PropTypes.shape({\n  //   page: PropTypes.number,\n  //   results: PropTypes.arrayOf(PropTypes.object),\n  //   total_pages: PropTypes.number,\n  //   total_results: PropTypes.number,\n  // }),\n};\n\nexport default Footer;\n// export default connect(mapStateToProps, {})(Footer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { connect } from 'react-redux';\n\nimport { getListPages } from '../../utils/getListPages';\n\n// styles\nimport s from './styles/Pagination.module.scss';\nimport { getTopMovies } from '../../actions';\n\nconst Pagination = ({ page, totalPages, getTopMovies }) => {\n  const listPages = getListPages(page, totalPages);\n  const listOfNavigation = listPages.map((item, key) => {\n    const navigationItem = classNames(s.navigationItem, {\n      [s.navigationActiveItem]: item === page,\n    });\n    return (\n      <li\n        key={key}\n        className={navigationItem}\n        onClick={() => getTopMovies(item)}\n      >\n        {item}\n      </li>\n    );\n  });\n\n  return (\n    <div className={s.pagination}>\n      <ul>\n        {listOfNavigation}\n      </ul>\n    </div>\n  );\n};\n\nPagination.propTypes = {\n  page: PropTypes.number,\n  totalPages: PropTypes.number,\n  getTopMovies: PropTypes.func,\n};\n\nexport default connect(null, { getTopMovies })(Pagination);\n","export const getListPages = (page, totalPages) => {\n  const listPages = [];\n\n  if (page < 5) {\n    for (let i = 1; i <= 7; i++) {\n      listPages.push(i);\n    }\n    listPages.push('...', totalPages - 1, totalPages);\n  } else if (page >= 5 && page < 8) {\n    for (let i = 1; i <= page; i++) {\n      listPages.push(i);\n    }\n    listPages.push(page + 1, page + 2, page + 3, '...', totalPages - 1, totalPages);\n  } else if (page < totalPages - 3 && page > totalPages - 8) {\n    listPages.push(1, 2, '...');\n    listPages.push(page - 3, page - 2, page - 1);\n    for (let i = page; i <= totalPages; i++) {\n      listPages.push(i);\n    }\n  } else if (page > totalPages - 8) {\n    listPages.push(1, 2, '...');\n    for (let i = totalPages - 6; i <= totalPages; i++) {\n      listPages.push(i);\n    }\n  }  else {\n    listPages.push(1, 2, '...', page - 3, page - 2, page - 1, page, page + 1, page + 2, page + 3, '...', totalPages - 1, totalPages);\n  }\n\n  return listPages;\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { getMoviesList } from './utils/updateMovieUrl';\nimport MovieList from './components/MovieList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Pagination from './components/Pagination';\nimport { getTopMovies } from './actions';\n\n// styles\nimport './styles/reset.css';\nimport './styles/normalize.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.getTopMovies(1);\n  }\n\n  render() {\n    const { data } = this.props;\n    if (data && data.results && Array.isArray(data.results))  {\n      const movies = getMoviesList(data);\n      return (\n        <div>\n          <Header />\n          {movies\n            ? <MovieList movies={movies} />\n            : null}\n          {movies\n            ? <Pagination page={data.page} totalPages={data.total_pages} />\n            : null}\n          <Footer />\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n};\n\nconst mapStateToProps = state => {\n  return ({\n    data: state.data.data[state.data.activeSortType],\n  });\n};\n\nApp.propTypes = {\n  data: PropTypes.shape({\n    page: PropTypes.number,\n    results: PropTypes.arrayOf(PropTypes.object),\n    total_pages: PropTypes.number,\n    total_results: PropTypes.number,\n  }),\n  getTopMovies: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, { getTopMovies })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_LATEST_DATA, FETCH_TOP_RATED_DATA } from '../actions/types';\n\nconst initialState = {\n  activeSortType: 'topRated',\n  data: {\n    latest: {},\n    topRated: {},\n  },\n};\n\nexport function data(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_TOP_RATED_DATA:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          topRated: action.data,\n        },\n      };\n    case FETCH_LATEST_DATA:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          latest: action.data,\n        },\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { data } from './data';\n\nexport const reducer = combineReducers({\n  data,\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { reducer } from './reducers';\nimport { getTopMovies } from './actions';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement,\n);\n\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie_item\":\"MovieList_movie_item__3VMvS\",\"movie_title\":\"MovieList_movie_title__2t6YP\"};"],"sourceRoot":""}